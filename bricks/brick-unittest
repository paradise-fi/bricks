// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * Unit testing support code. To run the tests, #include all the files with
 * unit tests in them and run unittest::run(). To get a listing, use
 * unittest::list(). There are examples of unit tests at the end of this file.
 *
 * Unit test registration is only enabled when compiling with
 * -DBRICK_UNITTEST_REG to avoid unneccessary startup-time overhead in normal
 * binaries. See also bricks_unittest in support.cmake.
 */

/*
 * (c) 2006-2015 Petr Roƒçkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <algorithm>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <cstdlib>
#include <cxxabi.h>
#include <vector>
#include <set>
#include <map>
#include <stdexcept>

#include <brick-assert>

#ifdef __unix__
#include <unistd.h>
#include <sys/wait.h>
#endif

#ifndef BRICK_UNITTEST_H
#define BRICK_UNITTEST_H

namespace brick {
namespace unittest {

struct TestBase
{
    std::string name;
    bool expect_failure;
    virtual void run() = 0;
    virtual std::string group() = 0;
    virtual ~TestBase() {}

    static std::vector< TestBase * > *testcases;
    static std::set< std::string > *registered;

    TestBase( std::string name )
        : name( name ) {}

    virtual std::string describe()
    {
        return group() + "::" + name;
    }
    virtual std::string describe_long() { return describe(); }

    void _register()
    {
        if ( !testcases )
            testcases = new std::vector< TestBase * >;
        if ( !registered )
            registered = new std::set< std::string >;
        if ( registered->find( describe() ) == registered->end() )
        {
            testcases->push_back( this );
            registered->insert( describe() );
        }
    }
};

struct TestFailed : std::exception
{
    const char *what() const noexcept { return "TestFailed"; }
};

namespace {

#if (defined( __unix__ ) || defined( POSIX )) && !defined( __divine__ )

void panic()
{
    try {
        std::rethrow_exception( std::current_exception() );
    } catch ( std::exception &e ) {
        std::cerr << std::endl << "  fatal error: " << e.what() << std::endl;
        abort();
    }
}

void fork_test( TestBase *tc, int *fds )
{
    pid_t pid = fork();
    if ( pid < 0 ) {
        std::cerr << "W: fork failed" << std::endl;
        tc->run(); // well...
    }
    if ( pid == 0 ) {
        if ( fds ) {
            ::dup2( fds[1], 1 );
            ::close( fds[0] );
            ::close( fds[1] );
        }

        try {
            std::set_terminate( panic );
            tc->run(); // if anything goes wrong, this should throw
        } catch ( const std::exception &e ) {
            std::cerr << std::endl << "###### " << tc->describe() << " failed."
                      << std::endl << "###### " << e.what() << std::endl;
            exit( 1 );
        }
        exit( 0 );
    }
    if ( pid > 0 ) {
        int status;
        pid_t finished UNUSED = waitpid( pid, &status, 0 );
        ASSERT_EQ( finished, pid );

        if ( WIFEXITED( status ) &&
             WEXITSTATUS( status ) == 0 )
                return;

        if ( WIFSIGNALED( status ) )
            std::cerr << std::endl << "###### " << tc->describe() << " caught fatal signal "
                      << WTERMSIG( status ) << std::endl;

        throw TestFailed();
    }
}

#else // windows and other non-posix

void fork_test( TestBase *tc, int * )
{
    tc->run();
}

#endif

}

#if defined(BRICK_UNITTEST_REG) || defined(BRICK_BENCHMARK_REG)

namespace {

std::string simplify( std::string s, std::string l, bool fill = true )
{
    int cut = 0, stop = 0;

    while ( cut < int( s.length() ) && cut < int( l.length() ) && s[cut] == l[cut] )
    {
        ++cut;
        if ( l[cut - 1] == ':' )
            stop = cut;
        if ( l[cut] == '<' )
            break;
    }

    while ( cut < int( s.length() ) && s[ cut ] != '<' )
        ++cut;

    if ( s[cut] == '<' )
    {
        s = std::string( s, 0, cut + 1 ) +
            simplify( std::string( s, cut + 1, std::string::npos),
                      std::string( s, 0, cut - 1 ), false );
    }

    return (fill ? std::string( stop, ' ' ) : "") + std::string( s, stop, std::string::npos );
}

/* TODO duplicated from brick-shelltest */
template< typename C >
void split( std::string s, C &c, char delim = ',' )
{
    std::stringstream ss( s );
    std::string item;
    while ( std::getline( ss, item, delim ) )
        c.push_back( item );
}

struct BeginsWith
{
    std::string p;
    BeginsWith( std::string p ) : p( p ) {}
    bool operator()( std::string s )
    {
        return std::string( s, 0, p.size() ) == p;
    }
};

struct Filter
{
    using Clause = std::vector< std::string >;
    using F = std::vector< Clause >;

    F formula;

    bool matches( std::string d )
    {
        for ( auto clause : formula ) {
            bool ok = false;
            for ( auto atom : clause )
                if ( d.find( atom ) != std::string::npos ) {
                    ok = true;
                    break;
                }
            if ( !ok )
                return false;
        }
        return true;
    }

    Filter( int argc, const char **argv )
    {
        for ( int i = 1; i < argc; ++i ) {
            if ( BeginsWith( "--" )( argv[i] ) )
                continue;
            formula.emplace_back();
            split( argv[i], formula.back() );
        }
    }
};

void group_summary( int good, int bad )
{
    std::cerr << " " << good << " ok";
    if ( bad )
        std::cerr << ", " << bad << " failed";
    std::cerr << std::endl;
}

int list( int argc, const char **argv )
{
    ASSERT( TestBase::testcases );
    Filter flt( argc, argv );
    for ( auto tc : *TestBase::testcases )
    {
        std::string d = tc->describe_long();
        if ( !flt.matches( d ) )
            continue;
        std::cerr << tc->describe() << std::endl;
    }
    return 0;
}

int run( int argc, const char **argv )
{
    ASSERT( TestBase::testcases );

    if ( argc >= 2 && std::string( argv[1] ) == "--list" )
        return list( argc, argv );

    std::map< std::string, int > counts;
    std::string last;

    int total = 0, total_bad = 0, group_count = 0;

    std::sort( TestBase::testcases->begin(), TestBase::testcases->end(),
               []( auto a, auto b ) { return a->group() < b->group(); } );

    Filter flt( argc, argv );
    if ( getenv( "T" ) )
    {
        flt.formula.emplace_back();
        split( getenv( "T" ), flt.formula.back() );
    }

    for ( auto tc : *TestBase::testcases )
        if ( flt.matches( tc->describe() ) )
        {
             ++ counts[ tc->group() ];
             ++ total;
        }


    int all = 0, bad = 0;

    for ( auto tc : *TestBase::testcases ) {
        if ( !flt.matches( tc->describe() ) )
            continue;

        if ( last != tc->group() )
        {
            if ( all )
                group_summary( all - bad, bad );

            group_count ++;
            std::cerr << simplify( tc->group(), last ) << " " << std::flush;
            all = bad = 0;
        }

        bool ok = false;
        try {
            ++ all;
            if ( total == 1 )
                tc->run();
            else
                fork_test( tc, nullptr );
            ok = true;
        } catch ( const std::exception &e ) {
            if ( e.what() != std::string( "TestFailed" ) )
                std::cerr << std::endl << "###### " << tc->describe() << " failed."
                          << std::endl << "###### " << e.what() << std::endl;
            std::cerr << "[    ] " << tc->group() << " " << std::flush;
            ++ bad;
            ++ total_bad;
        }

        if ( ok )
            std::cerr << "." << std::flush;

        last = tc->group();
    }

    group_summary( all - bad, bad );
    std::cerr << "# summary: " << (total - total_bad) << " ok";
    if ( total_bad )
        std::cerr << ", " << total_bad << " failed";
    std::cerr << std::endl;
    return total_bad > 0;
}

}

#endif

template< typename T >
std::string _typeid() {
#ifdef NO_RTTI
    return "unnamed";
#else
    int stat;
    char *dem = abi::__cxa_demangle( typeid( T ).name(),
                                nullptr, nullptr, &stat );
    std::string strdem( dem );
    std::free( dem );
    return strdem;
#endif
}

template< typename TestGroup, void (TestGroup::*testcase)() >
struct TestCase : TestBase
{
    void run() {
        TestGroup tg;
        bool passed = false;
        try {
            (tg.*testcase)();
            passed = true;
        } catch (...) {
            if ( !expect_failure )
                throw;
        }
        if ( passed && expect_failure )
            throw std::runtime_error("test passed unexpectedly");
    }

    std::string group()
    {
        return _typeid< TestGroup >();
    }

    TestCase( std::string n ) : TestBase( n ) {}
};

#define TEST_(n, T, INIT)                                               \
    void __reg1_ ## n()                                                 \
    {                                                                   \
        using SELFR = decltype(*this);                                  \
        using SELF = typename std::remove_reference< SELFR >::type;     \
        &__reg2_ ## n< SELF >;                                          \
    }                                                                   \
    template< typename SELF >                                           \
    static void  __attribute__((constructor)) __reg2_ ## n()            \
    {                                                                   \
        static ::brick::T< SELF, &SELF::n > tc ( #n ); \
        INIT                                                            \
        tc._register();                                                 \
    }                                                                   \
    void n()

#undef TEST
#undef TEST_FAILING

#ifndef BRICK_UNITTEST_REG

#define TEST(n)         void n()
#define TEST_FAILING(n) void n()

#else

#define TEST(n)         TEST_(n, unittest::TestCase, tc.expect_failure = false;)
#define TEST_FAILING(n) TEST_(n, unittest::TestCase, tc.expect_failure = true;)

#endif

#if defined(BRICK_UNITTEST_MAIN) || defined(BRICK_BENCHMARK_MAIN)
std::vector< TestBase * > *TestBase::testcases;
std::set< std::string > *TestBase::registered;
#endif

}

namespace t_unittest {

using namespace unittest;

struct SelfTest
{
    TEST(empty) {}

    TEST_FAILING(expected)
    {
        ASSERT( false );
    }

    TEST(_assert_eq)
    {
        bool die UNUSED = true;
        try {
            ASSERT_EQ( 1, 2 );
        } catch ( _assert::AssertFailed ) {
            die = false;
        }
        ASSERT( !die );
    }
};

}
}


#endif

#ifdef BRICK_UNITTEST_MAIN

int main( int argc, const char **argv )
{
    return brick::unittest::run( argc, argv );
}

#endif

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab
